sqlite> .schema
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    language TEXT DEFAULT 'en' 
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE managers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    manager_name TEXT NOT NULL UNIQUE
, manager_mail TEXT);
CREATE TABLE engineers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    engineer_name TEXT NOT NULL UNIQUE
, engineer_mail TEXT);
CREATE TABLE customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_name TEXT NOT NULL UNIQUE,
    customer_country TEXT NOT NULL
);
CREATE TABLE projects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    project_number TEXT NOT NULL UNIQUE,
    project_name TEXT NOT NULL UNIQUE,
    manager_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    customer_id INTEGER NOT NULL,
    FOREIGN KEY (manager_id) REFERENCES managers(id),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
CREATE TABLE groups (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    project_id INTEGER NOT NULL,
    engineer_id INTEGER NOT NULL, group_name TEXT NOT NULL, group_number TEXT NOT NULL,
    FOREIGN KEY (project_id) REFERENCES projects(id),
    FOREIGN KEY (engineer_id) REFERENCES engineers(id)
);
CREATE TABLE IF NOT EXISTS "components" (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    group_id INTEGER NOT NULL,
    position_no TEXT,
    component_no TEXT,
    component_name TEXT,
    unit_quantity INTEGER,
    total_quantity INTEGER,
    weight FLOAT,
    description TEXT,
    size TEXT,
    materials TEXT,         -- now nullable
    machine_type TEXT,
    notes TEXT,
    working_area TEXT,
    FOREIGN KEY (group_id) REFERENCES groups(id)
);
CREATE TABLE problems (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    project_id INTEGER NOT NULL,
    group_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,             -- who reported the problem
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    planned_closing_date DATE NOT NULL,   -- planned closing date for the whole problem
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (project_id) REFERENCES projects(id),
    FOREIGN KEY (group_id) REFERENCES groups(id)
);
CREATE TABLE problem_components (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    problem_id INTEGER NOT NULL,          -- link to problem
    component_id INTEGER NOT NULL,        -- link to the actual component
    reason TEXT,
    department TEXT,
    action TEXT,
    priority TEXT,
    description TEXT,
    FOREIGN KEY (problem_id) REFERENCES problems(id),
    FOREIGN KEY (component_id) REFERENCES components(id)
);
CREATE TABLE problem_steps (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    problem_id INTEGER NOT NULL,
    component_id INTEGER NOT NULL,
    step_number INTEGER NOT NULL,
    df_filename TEXT NOT NULL,           -- e.g., df_1.xlsx
    quantity INTEGER NOT NULL,
    action TEXT NOT NULL,
    status TEXT NOT NULL,                 -- Pending, Completed, Issue
    planned_closing_date DATE NOT NULL,
    action_after_report TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (problem_id) REFERENCES problems(id),
    FOREIGN KEY (component_id) REFERENCES components(id)
);